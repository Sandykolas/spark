name: v2.4.5-based

on:
  push:
    tags:
      - 'ne-*'

jobs:
  build:
    name: Create and Publish Release
    runs-on: ubuntu-latest
    env:
      PNAME: ${{ github.ref }}
    steps:
      - uses: actions/checkout@master
      # We split caches because GitHub Action Cache has a 400MB-size limit.
      - uses: actions/cache@v1
        with:
          path: build
          key: build-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            build-
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository/com
          key: ${{ matrix.scala }}-${{ matrix.hadoop }}-maven-com-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ matrix.scala }}-${{ matrix.hadoop }}-maven-com-
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository/org
          key: ${{ matrix.scala }}-${{ matrix.hadoop }}-maven-org-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ matrix.scala }}-${{ matrix.hadoop }}-maven-org-
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - name: Make Distribution
        run: |
          export MAVEN_OPTS="-Xmx2g -XX:ReservedCodeCacheSize=1g -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN"
          export BUILDFLAGS="-Pyarn -Pkubernetes -Phive -Phive-thriftserver -Phadoop-2.7 -Dhadoop.version-2.7.4"
          refstr=${{ github.ref }}
          PNAME=${refstr##*/}
          export MAVEN_CLI_OPTS="--no-transfer-progress"
          mkdir -p ~/.m2
          ./build/mvn $MAVEN_CLI_OPTS -DskipTests $BUILDFLAGS clean package
          mkdir -p dist/jars
          GITREV=$(git rev-parse --short HEAD 2>/dev/null || :)
          echo "NetEase Corp Spark" > "dist/RELEASE"
          echo "Apache Spark 2.4.5 based" >> "dist/RELEASE"
          echo "In house tag:\n  $PNAME" >> "dist/RELEASE"
          echo "Git revision:\n   $GITREV" >> "dist/RELEASE"
          echo "Created by:\n  Kent Yao" >> "dist/RELEASE"
          echo "Build flags:\n  $BUILDFLAGS" >> "dist/RELEASE"
          cp assembly/target/scala*/jars/* dist/jars/
          mkdir dist/yarn
          cp common/network-yarn/target/scala*/spark-*-yarn-shuffle.jar dist/yarn
          mkdir -p dist/kubernetes
          cp -a resource-managers/kubernetes/docker/src/main/dockerfiles "dist/kubernetes/"
          cp -a resource-managers/kubernetes/integration-tests/tests "dist/kubernetes/"
          mkdir -p dist/examples/jars
          cp examples/target/scala*/jars/* dist/examples/jars
          mkdir -p dist/examples/src/main
          cp -r examples/src/main dist/examples/src/
          cp LICENSE-binary dist/LICENSE
          cp NOTICE-binary dist/NOTICE
          cp -r data dist
          mkdir dist/conf
          cp conf/*.template dist/conf
          cp README.md dist
          cp -r bin dist/
          cp -r python dist/
          cp -r dist "spark-2.4.5-bin-$PNAME"
          tar -czvf "spark-2.4.5-bin-$PNAME.tgz" "spark-2.4.5-bin-$PNAME"
          rm -rf "spark-2.4.5-bin-$PNAME"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release spark-2.4.5-bin-$PNAME
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./spark-2.4.5-bin-$PNAME.tgz
          asset_name: spark-2.4.5-bin-$PNAME.tgz
          asset_content_type: application/zip
